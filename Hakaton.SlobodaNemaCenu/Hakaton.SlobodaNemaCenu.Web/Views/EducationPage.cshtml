@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.EducationPage>
@using ContentModels = Hakaton.SlobodaNemaCenu.Web.Models.Generated;
@{
    Layout = "_Layout.cshtml";
    var categories = Model.CategoriesContainer.Children<ContentModels.EducationCategory>() ?? Array.Empty<ContentModels.EducationCategory>();
    var pageUrl = Model.Url(mode:UrlMode.Absolute);
    string categoryIdsQueryParam = Context.Request.Query["categoryIds"].FirstOrDefault();
    List<int> categoryIds; 
    if (string.IsNullOrWhiteSpace(categoryIdsQueryParam)) {
        categoryIds = Enumerable.Empty<int>().ToList();
    }
    else
    {
        categoryIds = categoryIdsQueryParam.Split(",")
                .Select(categoryIdStr => int.TryParse(categoryIdStr, out int categoryId) ? categoryId : int.MinValue)
                .Where(categoryId => categoryId != int.MinValue)
                .ToList();
    }
    var items = Model.EducationItems.Select(e => e.Content).Cast<ContentModels.EducationItem>()
                    .Where(ei => !categoryIds.Any() || categoryIds.Contains(ei.Category.Id))
                    .OrderByDescending(item => item.Category.Id)
                    .OrderByDescending(n => n.Title);
    var checkedCategories = categories.Where(c => categoryIds.Contains(c.Id));
}

  <main class="main">
      <section class="banner small">
        <div class="wrap">
          <div class="banner-wrap">
            <div class="banner-text">
              <h1 class="h1 banner-title">@Model.Title</h1>
              <p class="text">
                @Model.Text
              </p>
            </div>
            @if(Model.BannerImage is not null){
                    <div class="banner-img">
                        <img src="@Model.BannerImage.GetCropUrl()" alt="banner image" />
                    </div>
            }
            
       
          </div>
        </div>
      </section>
      <section class="education-filters">
        <div class="wrap">
          <div class="checkbox-dropdown">
            <button class="btn checkbox-dropdown-btn js-dropdown-btn">
                    @(@checkedCategories.Any() ? string.Join(", ", checkedCategories.Select(category => category.Name)) : @Umbraco.GetDictionaryValue("allCategories", "All")) <span class="icon icon-dropdown"></span>
            </button>
            <ul class="checkbox-dropdown-list js-dropdown-list">
              <li>
                <label>
                            <input type="checkbox" data-category-id="-1" class="educationCategory" value="@Umbraco.GetDictionaryValue("allCategories", "All")" name="Svi" onClick="clickCategory(event, '@pageUrl')" checked="@(!checkedCategories.Any())" />
                  <span class="checkmark"></span>Svi</label
                >
              </li>
              @foreach(var item in categories) {
                    <li>
                        <label>
                                <input class="educationCategory" data-category-id="@item.Id" type="checkbox" name="mediji" onClick="clickCategory(event, '@pageUrl')" checked="@checkedCategories.Any(c => c.Id == item.Id)" /><span class="checkmark"></span>@item.Title
                        </label>
                    </li>
              }
            </ul>
          </div>
        </div>
      </section>
      <section class="education-cards">
        <div class="wrap">
          <div class="education-cards__wrap">
                @foreach(var item in items){
                    @Html.Partial("~/Views/Partials/blocklist/Components/educationItem.cshtml", item)
                }
          </div>
        </div>
      </section>
    </main>

<script>
    function clickCategory(event, baseUrl){
        var inputElements = document.getElementsByClassName('educationCategory');
        var url = baseUrl + "?categoryIds="
        var allCategoriesCheckedElement = null;
        var multipleOptionsSelected = false;

        var allCheckedOptions = [];

        for (const currentElement of inputElements) {
            if (currentElement.checked) {
                if (currentElement.dataset.categoryId == "-1") {
                    allCategoriesCheckedElement = currentElement;
                }
                else {
                    allCheckedOptions.push(currentElement);
                }
            }
        }


        if (allCategoriesCheckedElement) {
            if (allCategoriesCheckedElement == event.srcElement) {
                for (const checkedOption of allCheckedOptions) {
                    checkedOption.checked = false;
                }
                url = baseUrl;
            }
            else {
                allCategoriesCheckedElement.checked = false;
            }
        }

        if (!allCategoriesCheckedElement || !allCategoriesCheckedElement.checked) {
            if (allCheckedOptions.length > 0) {
                for (const checkedOption of allCheckedOptions) {
                    url += checkedOption.dataset.categoryId + ",";
                }
            }
            else {
                url = baseUrl;
            }
        }

        if (url.endsWith(",")) {
            url = url.substring(0, url.length - 1);
        }

        location.href = url;
    }
</script>