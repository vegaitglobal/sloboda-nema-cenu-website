@using Hakaton.SlobodaNemaCenu.Web.Models.Generated;
@inherits UmbracoViewPage

@{
    var homePage = Model.AncestorOrSelf<Home>();
}

<header class="header">
    <div class="wrap">
        <div class="header__container">
            @if(homePage.NavigationLogo != null)
            {
                <a href="/" class="logo">
                    <img class="logo__img" src="@homePage.NavigationLogo.Url()" alt="@homePage.NavigationLogo.Name">
                </a>
            }
            @if (homePage.NavigationPages != null && homePage.NavigationPages.Any())
            {
                <nav class="nav">
                    <ul class="nav__list" role="menubar">
                        @foreach (var pageItem in homePage.NavigationPages)
                        {
                            var currentPageUrl = Umbraco.AssignedContentItem.Url();

                            if (currentPageUrl.Equals(pageItem.Url))
                            {
                                <li class="nav__item active" role="menuitem">
                                    <a class="nav__link" href="@pageItem.Url" rel="noopener noreferrer">@pageItem.Name</a>
                                </li>
                            }
                            else
                            {
                                <li class="nav__item" role="menuitem">
                                    <a class="nav__link" href="@pageItem.Url" target="@pageItem.Target" rel="noopener noreferrer">@pageItem.Name</a>
                                </li>
                            }

                        }
                    </ul>
                </nav>
            }
            <div class="header-action">
                @if(homePage.NavigationFlags?.Any() ?? false)
                {
                    <div class="language-dropdown">
                        @{
                            var currentCulture = Model.GetCultureFromDomains();

                            var currrentCultureFlag = homePage.NavigationFlags.FirstOrDefault(w => ((CountryDropdownItem)w.Content).CountryKey.Equals(currentCulture));

                            if (currrentCultureFlag is null)
                            {
                                currrentCultureFlag = homePage.NavigationFlags.FirstOrDefault(w => ((CountryDropdownItem)w.Content).CountryKey.Equals("sr"));
                            }

                            var casted = (CountryDropdownItem)currrentCultureFlag.Content;

                            <button class="btn js-dropdown-btn checkbox-dropdown-btn">
                                <img src="@casted.CountryFlag?.Url()" alt="@currentCulture">
                                <span class="icon icon-dropdown"></span>
                            </button>
                        }
                        <ul class="js-dropdown-list checkbox-dropdown-list">
                            @foreach(var item in homePage.NavigationFlags)
                            {
                                var countryItem = (CountryDropdownItem)item.Content;
                                var countryKey = countryItem.CountryKey;
                                @if(countryKey.Equals("sr"))
                                {
                                    countryKey = string.Empty;
                                }

                                <li data-country-key="@countryItem.CountryKey">
                                    <a href="/@countryKey"><img src="@countryItem.CountryFlag?.Url()" alt="@countryItem.CountryFlag?.Name"></a>
                                </li>
                            }
                        </ul>
                    </div>
                }
                <button type="button" class="mobile-menu">
                    <div><span class="sr-only">Mobile menu button</span></div>
                </button>
                @if(homePage.NavigationButtonLink != null)
                {
                    <a href="@homePage.NavigationButtonLink.Url" class="btn header-btn">@homePage.NavigationButtonLink.Name</a>
                }
            </div>
        </div>
    </div>
</header>